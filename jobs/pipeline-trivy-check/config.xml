<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3883.vb_3ff2a_e3eea_f">
    <script>def COLOR_MAP = [
    &apos;SUCCESS&apos;: &apos;good&apos;, 
    &apos;FAILURE&apos;: &apos;danger&apos;,
    &apos;REPORT&apos;: &apos;#FFFF00&apos;
]
pipeline {
    agent any
    tools {
      maven &quot;MAVEN3&quot;
      jdk &quot;OracleJDK8&quot;
  }

    environment {
        registryCredential = &apos;ecr:us-east-1:awsiamuser&apos;
        appRegistry = &quot;247477386084.dkr.ecr.us-east-1.amazonaws.com/devopsproj-todo&quot;
        vprofileRegistry = &quot;https://247477386084.dkr.ecr.us-east-1.amazonaws.com/&quot;
        cluster = &quot;todoapp-cluster&quot;
        service = &quot;todoapp-service&quot;
        slack_channel = &quot;my-proj-cicd&quot; 
        trivyReportPath = &quot;${env.WORKSPACE}/trivy_report.json&quot;
    }
    
  stages {
    stage(&apos;Fetch code&apos;){
      steps {
        git branch: &apos;master&apos;, url: &apos;https://github.com/Manav-Khandurie/To-do-app-Maven.git&apos;
      }
    }
    stage(&apos;Build&apos;){
      steps {
        sh &apos;mvn clean install&apos;
      }
    }

    stage(&apos;Unit Test and Integration Test&apos;){
      steps {
        sh &apos;mvn test&apos;
      }
    }

    
    stage(&apos;Generate Surefire Reports&apos;) {
            steps {
                script {
                    sh &apos;mvn surefire-report:report&apos;
                }
                junit &apos;target/surefire-reports/**/*.xml&apos;
            }
    }
    
    stage(&apos;Build App Image&apos;) {
       steps {
         script {
                dockerImage = docker.build( appRegistry + &quot;:$BUILD_NUMBER&quot;)
             }
        }
    }

    stage(&apos;Trivy Vulnerability Scan&apos;) {
        steps {
            script {
                echo &quot;${env.WORKSPACE}&quot;
                sh &quot;trivy image ${appRegistry}:${BUILD_NUMBER} --severity CRITICAL --no-progress --format json &gt; ${trivyReportPath}&quot;
                def trivyJson = readJSON file: trivyReportPath
                def criticalCount = trivyJson[0].Vulnerabilities.findAll { it.Severity == &apos;CRITICAL&apos; }.size()
    
                // Fail the build if critical vulnerabilities exceed the threshold
                if (criticalCount &gt; 20) {
                    error &quot;Critical vulnerabilities detected: ${criticalCount}&quot;
                } else {
                    echo &quot;No critical vulnerabilities detected.&quot;
                }
            }
        }
    }


    stage(&apos;Upload to slack&apos;){
        steps {
                script {
                    slackUploadFile channel: slack_channel, filePath: &apos;${env.WORKSPACE}/trivy_report.json&apos;, initialComment: &apos;Trivy report&apos;
                }
        }
    }
    
    stage(&apos;Upload App Image to AWS ECR&apos;) {
          steps{
            script {
              docker.withRegistry( vprofileRegistry, registryCredential ) {
                dockerImage.push(&quot;$BUILD_NUMBER&quot;)
                dockerImage.push(&apos;latest&apos;)
              }
            }
          }
     }

    // stage(&apos;Deploy to ecs&apos;) {
    //       steps {
    //     withAWS(credentials: &apos;awsiamuser&apos;, region: &apos;us-east-1&apos;) {
    //       sh &apos;aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment&apos;
    //     }
    //   }
    //  }

  }
    post {
        always {
            echo &apos;Slack Notifications.&apos;
            slackSend channel: slack_channel, 
                color: COLOR_MAP[currentBuild.currentResult],
                message: &quot;*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}&quot;
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>